package com.scottlogic.ldapleakpreventer;

import org.jboss.as.controller.*;
import org.jboss.as.controller.descriptions.StandardResourceDescriptionResolver;
import org.jboss.as.controller.operations.common.GenericSubsystemDescribeHandler;
import org.jboss.as.controller.parsing.ExtensionParsingContext;
import org.jboss.as.controller.parsing.ParseUtils;
import org.jboss.as.controller.persistence.SubsystemMarshallingContext;
import org.jboss.as.controller.registry.ManagementResourceRegistration;
import org.jboss.as.controller.registry.OperationEntry;
import org.jboss.dmr.ModelNode;
import org.jboss.logging.Logger;
import org.jboss.staxmapper.XMLElementReader;
import org.jboss.staxmapper.XMLElementWriter;
import org.jboss.staxmapper.XMLExtendedStreamReader;
import org.jboss.staxmapper.XMLExtendedStreamWriter;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import java.util.List;

import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.*;

/**
 * JBoss extension that loads the <code>com.sun.jndi.ldap.LdapPoolManager</code> class up front to prevent a
 * web-application classloader leak that would otherwise occur if the web-application itself was responsible for
 * triggering the LdapPoolManager class to be loaded.
 *
 * The implementation is made complicated because the properties defined in the &lt;system-properties&gt; element in
 * jboss's standalone.xml configuration file is not available until after this extension is constructed and initialised.
 * The extension must therefore hook into the configuration parsing mechanism so that the LdapPoolManager class is only
 * loaded once the properties are available. This implementation is based on the code generated by using the
 * maven archetype <code>org.jboss.as.archetypes.jboss-as-subsystem</code>.
 */
public class LDAPLeakPreventerExtension implements Extension {
    private static final Logger log = Logger.getLogger(LDAPLeakPreventerExtension.class.getPackage().getName());

    static final String POOL_TIMEOUT_PROPERTY = "com.sun.jndi.ldap.connect.pool.timeout";
    private static final String LDAP_POOL_MANAGER_CLASS = "com.sun.jndi.ldap.LdapPoolManager";

    /** The namespace used for the {@code subsystem} element */
    private static final String NAMESPACE = "urn:scottlogic:ldapleakpreventer:1.0";

    /** The name of our subsystem within the model. */
    static final String SUBSYSTEM_NAME = "ldapleakpreventer";

    private final SubsystemParser parser = new SubsystemParser();
    protected static final PathElement SUBSYSTEM_PATH = PathElement.pathElement(SUBSYSTEM, SUBSYSTEM_NAME);
    static final String RESOURCE_NAME = LDAPLeakPreventerExtension.class.getPackage().getName() + ".LocalDescriptions";

    private static final ResourceDefinition SUBSYSTEM_DEFINITION = new SimpleResourceDefinition(SUBSYSTEM_PATH,
            new StandardResourceDescriptionResolver(SUBSYSTEM_NAME, RESOURCE_NAME,
                    LDAPLeakPreventerExtension.class.getClassLoader(), true, false),
            SubsystemAdd.INSTANCE,
            SubsystemRemove.INSTANCE);

    @Override
    public void initializeParsers(ExtensionParsingContext context) {
        context.setSubsystemXmlMapping(SUBSYSTEM_NAME, NAMESPACE, parser);
    }

    @Override
    public void initialize(ExtensionContext context) {
        SubsystemRegistration subsystem = context.registerSubsystem(SUBSYSTEM_NAME, 1, 0);
        ManagementResourceRegistration registration = subsystem.registerSubsystemModel(SUBSYSTEM_DEFINITION);
        registration.registerOperationHandler(DESCRIBE, GenericSubsystemDescribeHandler.INSTANCE,
                GenericSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);
        subsystem.registerXMLElementWriter(parser);
    }

    static void loadLdapPoolManagerClass() {
        try {
            Class.forName(LDAP_POOL_MANAGER_CLASS);
            log.info("Loaded LdapPoolManager class");
        } catch (ClassNotFoundException e) {
            log.info("Error loading LdapPoolManager class", e);
        }
    }

    private static class SubsystemParser implements XMLStreamConstants, XMLElementReader<List<ModelNode>>,
            XMLElementWriter<SubsystemMarshallingContext> {

        /** {@inheritDoc} */
        @Override
        public void writeContent(XMLExtendedStreamWriter writer, SubsystemMarshallingContext context)
                throws XMLStreamException {
            context.startSubsystemElement(LDAPLeakPreventerExtension.NAMESPACE, false);
            writer.writeEndElement();
        }

        /** {@inheritDoc} */
        @Override
        public void readElement(XMLExtendedStreamReader reader, List<ModelNode> list)
                throws XMLStreamException {
            ParseUtils.requireNoContent(reader);
            list.add(createAddSubsystemOperation());
        }

        private static ModelNode createAddSubsystemOperation() {
            final ModelNode subsystem = new ModelNode();
            subsystem.get(OP).set(ADD);
            subsystem.get(OP_ADDR).add(SUBSYSTEM, SUBSYSTEM_NAME);
            return subsystem;
        }
    }
}
